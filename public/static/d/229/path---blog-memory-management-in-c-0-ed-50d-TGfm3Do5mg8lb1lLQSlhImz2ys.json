{"data":{"markdownRemark":{"html":"<h2>Overview</h2>\n<p>Due to it's being type unsafe , it's very difficult to develop a garbage collector for c++. It's rather something that the C++ community often boosts about. It's true that it makes the compiled programs very lean and smaller in size. However it adds work to the development process. You'd have to handle the memory yourself as a c++ developer.</p>\n<h2>Types of memory</h2>\n<p>There are mainly three types of memory that can be used by the developer :</p>\n<ol>\n<li>Global Memory.</li>\n<li>Stack Memory.</li>\n<li>Heap Memory.</li>\n</ol>\n<p><strong>Global memory</strong> is alocated by the operating system loader. It exists in two diffirent locations : <code class=\"language-text\">.bss</code> (un-initialized memory) and <code class=\"language-text\">.data</code> (value initialized memory).</p>\n<p>These are the global variables declared outside of function scopes in c++. For following example is from the great book \"Hands-On System Programming With C++\"</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">int</span> bss_mem <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> data_mem <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> bss_mem <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ==> 0</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> data_mem <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ==> 42</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Global memory specially value-initialized memory increase the size of the program on disk, therefore longer loading time.</p>\n<p><strong>Stack memroy</strong> stores values in the order they are declared and these values are removed in the oposite order. Applying \"last in first out\" such as regular stack data structures. Thus all data stored on the stack must have known , fixed size.</p>\n<p>When a function is called , it's pushed to the memory stack. All variables declared in that function are pushed to the stack right after the function one after the other. When that function returns , items are popped out of the stack one after the other until the function is popped. This is basically how function scope is implemented.</p>\n<p><strong>Heap memory</strong> stores data with size that might change. The heap is less organized. When data is put on the heap , the program requests a certain amount of space from the operating system. The operating system responds with an empty spot on the stack that is big enough , marks it as being in use and returns a pointer. Accessing data in the heap is usually slower than accessing the stack because you'd have to follow a pointer which means that you're jumping around in memory.</p>\n<p>The process is described with very decent analogy on the rust-lang documentation website as follows :</p>\n<blockquote>\n<p>Think of being seated at a restaurant. When you enter, you state the number of people in your group, and the staff finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you’ve been seated to find you.</p>\n</blockquote>\n<blockquote>\n<p>consider a server at a restaurant taking orders from many tables. It’s most efficient to get all the orders at one table before moving on to the next table. Taking an order from table A, then an order from table B, then one from A again, and then one from B again would be a much slower process.</p>\n</blockquote>\n<p>Managing heap memory in c++ is through the <code class=\"language-text\">new()</code> and <code class=\"language-text\">delete()</code> operator functions as follows :</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// allocating the variable on the heap and returning a pointer.</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> ptr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// releasing the memory.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":2,"frontmatter":{"title":"Memory Management in C++","date":"13 Sep 2019","tags":["c++"],"path":"blog/memory-management-in-c++","excerpt":"A deeper look into memory management in c++."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/cancel-propagation-in-web-servers","title":"Cancel Propagation in Web Servers","tags":["go"],"excerpt":"Using the context package to propagate cancel events to save resource in web servers"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"postPath":"blog/memory-management-in-c++","translations":[{"hreflang":"en","path":"blog/memory-management-in-c++/"}]}}