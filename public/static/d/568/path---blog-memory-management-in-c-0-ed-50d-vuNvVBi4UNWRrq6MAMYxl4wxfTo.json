{"data":{"markdownRemark":{"html":"<h2>Overview</h2>\n<p>Due to it's being type unsafe , it's very difficult to develop a garbage collector for c++. It's rather something that the C++ community often boosts about. It's true that it makes the compiled programs very lean and smaller in size. However it adds work to the development process. You'd have to handle the memory yourself as a c++ developer.</p>\n<h2>Types of memory</h2>\n<p>There are mainly three types of memory that can be used by the developer :</p>\n<ol>\n<li>Global Memory.</li>\n<li>Stack Memory.</li>\n<li>Heap Memory.</li>\n</ol>\n<p><strong>Global memory</strong> is alocated by the operating system loader. It exists in two diffirent locations : <code class=\"language-text\">.bss</code> (un-initialized memory) and <code class=\"language-text\">.data</code> (value initialized memory).</p>\n<p>These are the global variables declared outside of function scopes in c++. For following example is from the great book \"Hands-On System Programming With C++\"</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">int</span> bss_mem <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> data_mem <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> bss_mem <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ==> 0</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> data_mem <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ==> 42</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Global memory specially value-initialized memory increase the size of the program on disk, therefore longer loading time.</p>\n<p><strong>Stack memroy</strong> stores values in the order they are declared and these values are removed in the oposite order. Applying \"last in first out\" such as regular stack data structures. Thus all data stored on the stack must have known , fixed size.</p>\n<p>When a function is called , it's pushed to the memory stack. All variables declared in that function are pushed to the stack right after the function one after the other. When that function returns , items are popped out of the stack one after the other until the function is popped. This is basically how function scope is implemented.</p>\n<p><strong>Heap memory</strong> stores data with size that might change. The heap is less organized. When data is put on the heap , the program requests a certain amount of space from the operating system. The operating system responds with an empty spot on the stack that is big enough , marks it as being in use and returns a pointer. Accessing data in the heap is usually slower than accessing the stack because you'd have to follow a pointer which means that you're jumping around in memory.</p>\n<p>The process is described with very decent analogy on the rust-lang documentation website as follows :</p>\n<blockquote>\n<p>Think of being seated at a restaurant. When you enter, you state the number of people in your group, and the staff finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you’ve been seated to find you.</p>\n</blockquote>\n<blockquote>\n<p>consider a server at a restaurant taking orders from many tables. It’s most efficient to get all the orders at one table before moving on to the next table. Taking an order from table A, then an order from table B, then one from A again, and then one from B again would be a much slower process.</p>\n</blockquote>\n<h2>Heap Allocation &#x26; Deallocation</h2>\n<p>Managing heap memory in c++ is through the <code class=\"language-text\">new()</code> and <code class=\"language-text\">delete()</code> operator functions as follows :</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// allocating the variable on the heap and returning a pointer.</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ==> 42</span>\n    <span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// releasing the memory.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This technique results in possible errors such as forgetting to call <code class=\"language-text\">delete()</code> to release the memory or calling <code class=\"language-text\">delete()</code> instead of <code class=\"language-text\">delete []</code> when de-allocating an array.</p>\n<h2>Ownership</h2>\n<p>In C++11 the concept of pointer ownership was introduced to make it easier and less error prone to manage the heap memory. The following two classes were introduced to achieve this :</p>\n<ul>\n<li>\n<p><code class=\"language-text\">std::unique_ptr{}</code> : A pointer uniquely owned by a signle entity.\nThis pointer is automatically deallocated by the compiler when it gets out of scope. Copying this pointer is not allowed.</p>\n</li>\n<li>\n<p><code class=\"language-text\">std::shared_ptr{}</code> : A pointer that may be owned by more that one entities. This pointer is deallocated automatically when all owners have released ownership of it. Copying this pointer is allowed.</p>\n</li>\n</ul>\n<p>It's discouraged by the C++ guidelines to perform any dynamic memory allocations by other that those two classes. Thus <code class=\"language-text\">std::unique_ptr{}</code> should be used instead of <code class=\"language-text\">new()</code> and <code class=\"language-text\">delete()</code>. To prevent memory leaks.</p>\n<p>The previous example should be changed to be the following :</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> ptr <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ==> 42</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The following functions can be used to create unique and shared pointers :</p>\n<p><code class=\"language-text\">std::make_unique&lt;type&gt;(args)</code> to create <code class=\"language-text\">std::unique_ptr{}</code> that allocates and deallocates a single object.</p>\n<p><code class=\"language-text\">std::make_unique&lt;type[]&gt;(size)</code> to create <code class=\"language-text\">std::unique_ptr{}</code> that performs array allocation and deallocations.</p>\n<p><code class=\"language-text\">std::make_shared()</code> to create <code class=\"language-text\">std::shared_ptr{}</code>.</p>\n<h3>The Unique Pointer Class</h3>\n<p>It should be noted that <code class=\"language-text\">std::unique_ptr{}</code> accpets a pointer previously allocated by <code class=\"language-text\">new()</code> and on destruction , releases the memory it was given via <code class=\"language-text\">delete</code>.</p>\n<p>The unique pointer can release it's allocation back to the heap on demand by calling the <code class=\"language-text\">reset()</code> function upon it. It explicitly tells the pointer to release it's memory on demand without having to lose scope. It's demonstrated in the following example :</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> ptr <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> ptr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ==> 0x55bcfa2b1e70</span>\n    ptr<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> ptr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ==> 0 (null pointer)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// the boolean operator is used to check if the pointer is null</span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>The Shared Pointer Class</h4>\n<p>Consider that you have two threads T1, T2. T1 creates a pointer and thus owns it. T2 has to use that pointer from T1 and thus owns it as much as T1.</p>\n<p>Handling this with <code class=\"language-text\">new()</code> and <code class=\"language-text\">delete()</code> can be quite messy since it's difficult to predict if the other thread is no longer using the pointer and therefore is't difficult to determine when to release the memory and from which thread this should be done.</p>\n<p>The <code class=\"language-text\">std::shared_pt{}</code> solves this problem with ease as in the following example.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">myclass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> m_data<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">myclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"myclass deleted\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        m_data<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nstd<span class=\"token operator\">::</span>thread t1<span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>thread t2<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">thread2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>myclass<span class=\"token operator\">></span> ptr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ptr<span class=\"token operator\">-></span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread2: complete\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">thread1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> ptr <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>myclass<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t2 <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span>thread2<span class=\"token punctuation\">,</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ptr<span class=\"token operator\">-></span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread1 : complete\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    t1 <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span>thread1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// > g++ -std=c++17 -lpthread main.cpp; ./a.out</span>\n<span class=\"token comment\">// thread1: complete</span>\n<span class=\"token comment\">// thread2: complete</span>\n<span class=\"token comment\">// myclass deleted</span></code></pre></div>","timeToRead":5,"frontmatter":{"title":"Memory Management in C++","date":"13 Sep 2019","tags":["c++"],"path":"blog/memory-management-in-c++","excerpt":"A deeper look into memory management in c++."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/cancel-propagation-in-web-servers","title":"Cancel Propagation in Web Servers","tags":["go"],"excerpt":"Using the context package to propagate cancel events to save resource in web servers"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"postPath":"blog/memory-management-in-c++","translations":[{"hreflang":"en","path":"blog/memory-management-in-c++/"}]}}