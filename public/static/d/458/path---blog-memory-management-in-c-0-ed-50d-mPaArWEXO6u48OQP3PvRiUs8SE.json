{"data":{"markdownRemark":{"html":"<h2>Overview</h2>\n<p>Due to it's being type unsafe , it's very difficult to develop a garbage collector for c++. It's rather something that the C++ community often boosts about. It's true that it makes the compiled programs very lean and smaller in size. However it adds work to the development process. You'd have to handle the memory yourself as a c++ developer.</p>\n<h2>Types of memory</h2>\n<p>There are mainly three types of memory that can be used by the developer :</p>\n<ol>\n<li>Global Memory.</li>\n<li>Stack Memory.</li>\n<li>Heap Memory.</li>\n</ol>\n<p>Global memory is alocated by the operating system loader. It exists in two diffirent locations : <code class=\"language-text\">.bss</code> (un-initialized memory) and <code class=\"language-text\">.data</code> (value initialized memory).</p>\n<p>These are the global variables declared outside of function scopes in c++. For following example is from the great book \"Hands-On System Programming With C++\"</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">int</span> bss_mem <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> data_mem <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> bss_mem <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ==> 0</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> data_mem <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ==> 42</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":1,"frontmatter":{"title":"Memory Management in C++","date":"13 Sep 2019","tags":["c++"],"path":"blog/memory-management-in-c++","excerpt":"A deeper look into memory management in c++."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/cancel-propagation-in-web-servers","title":"Cancel Propagation in Web Servers","tags":["go"],"excerpt":"Using the context package to propagate cancel events to save resource in web servers"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"postPath":"blog/memory-management-in-c++","translations":[{"hreflang":"en","path":"blog/memory-management-in-c++/"}]}}